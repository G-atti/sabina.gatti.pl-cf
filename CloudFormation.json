{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "All the resources needed for david.gatti.io",
	"Parameters": {
		"CodePipelineArtifacts": {
			"Description": "The S3 bucket name where CodePipeline will store the artifacts (this is needed only by CP to work, and pass task results to the next stage).",
			"Type": "String"
		},
		"DomainHomePage": {
			"Description": "Type your domain for your project",
			"Type": "String"
		},
		"GitHubToken": {
			"Description": "You need to create a Personal access tokens (https://github.com/settings/tokens) for CodePipeline to have access to the GitHub repo despite it being public.",
			"NoEcho": true,
			"Type": "String"
		},
		"MailchimpAPIKey": {
			"Description": "The API Key for MailChimp",
			"NoEcho": true,
			"Type": "String"
		},
		"MailchimpListID": {
			"Description": "The Mailchimp List ID where to save the emails",
			"Type": "String"
		},
		"Stage": {
			"Description": "Select what type of environment are you deploying.",
			"Type": "String",
			"AllowedValues": [
				"master",
				"development"
			],
			"Default": "development"
		}
	},
	"Resources": {
		"APIWebhookNewsletterSubscriptionAccount": {
			"Type": "AWS::ApiGateway::Account",
			"Properties": {
				"CloudWatchRoleArn": {
					"Fn::GetAtt": [
						"APIWebhookNewsletterSubscriptionRole",
						"Arn"
					]
				}
			}
		},
		"APIWebhookNewsletterSubscription": {
			"Type": "AWS::ApiGateway::RestApi",
			"Properties": {
				"Description": "Webhook to catch emails for the Newsletter.",
				"Name": "Webhook-NewsletterSubscription",
				"Body": {
					"swagger": "2.0",
					"info": {
						"version": "2017-12-25T08:30:13Z",
						"title": "sabina.gatti.pl"
					},
					"schemes": [
						"https"
					],
					"paths": {
						"/subscribe": {
							"post": {
								"produces": [
									"application/json"
								],
								"responses": {
									"200": {
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										}
									}
								},
								"x-amazon-apigateway-integration": {
									"uri": {
										"Fn::Join": [
											"",
											[
												"arn",
												":",
												"aws",
												":",
												"apigateway",
												":",
												{
													"Ref": "AWS::Region"
												},
												":",
												"lambda",
												":",
												"path/2015-03-31/functions/",
												{
													"Fn::GetAtt": [
														"LambdaNewsletterSubscription",
														"Arn"
													]
												},
												"/invocations"
											]
										]
									},
									"responses": {
										"default": {
											"statusCode": "200"
										}
									},
									"passthroughBehavior": "when_no_match",
									"httpMethod": "POST",
									"contentHandling": "CONVERT_TO_TEXT",
									"type": "aws_proxy"
								}
							},
							"options": {
								"consumes": [
									"application/json"
								],
								"produces": [
									"application/json"
								],
								"responses": {
									"200": {
										"description": "200 response",
										"schema": {
											"$ref": "#/definitions/Empty"
										},
										"headers": {
											"Access-Control-Allow-Origin": {
												"type": "string"
											},
											"Access-Control-Allow-Methods": {
												"type": "string"
											},
											"Access-Control-Allow-Headers": {
												"type": "string"
											}
										}
									}
								},
								"x-amazon-apigateway-integration": {
									"responses": {
										"default": {
											"statusCode": "200",
											"responseParameters": {
												"method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'",
												"method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
												"method.response.header.Access-Control-Allow-Origin": "'*'"
											}
										}
									},
									"passthroughBehavior": "when_no_match",
									"requestTemplates": {
										"application/json": "{\"statusCode\": 200}"
									},
									"type": "mock"
								}
							}
						}
					},
					"definitions": {
						"Empty": {
							"type": "object",
							"title": "Empty Schema"
						}
					}
				}
			}
		},
		"WebhookNewsletterSubscriptionDeployment": {
			"Type": "AWS::ApiGateway::Deployment",
			"Properties": {
				"Description": "Initial deployment",
				"RestApiId": {
					"Ref": "APIWebhookNewsletterSubscription"
				}
			}
		},
		"APIWebhookNewsletterSubscriptionRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "webhook_stripe_api_gateway",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "apigateway.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				},
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
				]
			}
		},
		"WebhookNewsletterSubscriptionStage": {
			"Type": "AWS::ApiGateway::Stage",
			"Properties": {
				"StageName": "production",
				"Description": "Code for the public",
				"DeploymentId": {
					"Ref": "WebhookNewsletterSubscriptionDeployment"
				},
				"RestApiId": {
					"Ref": "APIWebhookNewsletterSubscription"
				}
			}
		},
		"APIWebhookNewsletterSubscriptionPolicyInvoke": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "invoke",
				"Roles": [
					{
						"Ref": "APIWebhookNewsletterSubscriptionRole"
					}
				],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": "lambda:InvokeFunction",
							"Resource": [
								{
									"Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaNewsletterSubscription}"
								}
							]
						}
					]
				}
			}
		},
		"CloudFrontHome": {
			"Type": "AWS::CloudFront::Distribution",
			"Properties": {
				"DistributionConfig": {
					"Comment": "sabina.gatti.pl",
					"DefaultCacheBehavior": {
						"ForwardedValues": {
							"Cookies": {
								"Forward": "none"
							},
							"QueryString": false
						},
						"MinTTL": 0,
						"TargetOriginId": {
							"Fn::GetAtt": [
								"S3WebpageHome",
								"DomainName"
							]
						},
						"ViewerProtocolPolicy": "redirect-to-https",
						"AllowedMethods": [
							"GET",
							"HEAD"
						],
						"CachedMethods": [
							"GET",
							"HEAD"
						],
						"Compress": true,
						"DefaultTTL": 86400,
						"MaxTTL": 31536000,
						"SmoothStreaming": false
					},
					"Enabled": true,
					"Origins": [
						{
							"DomainName": {
								"Fn::GetAtt": [
									"S3WebpageHome",
									"DomainName"
								]
							},
							"Id": {
								"Fn::GetAtt": [
									"S3WebpageHome",
									"DomainName"
								]
							},
							"CustomOriginConfig": {
								"HTTPPort": 80,
								"HTTPSPort": 443,
								"OriginProtocolPolicy": "http-only",
								"OriginSSLProtocols": [
									"TLSv1.1"
								]
							}
						}
					],
					"DefaultRootObject": "home",
					"HttpVersion": "http2",
					"IPV6Enabled": true,
					"PriceClass": "PriceClass_100",
					"Restrictions": {
						"GeoRestriction": {
							"RestrictionType": "none"
						}
					}
				}
			}
		},
		"S3WebpageHome": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"AccessControl": "PublicRead",
				"BucketName": {
					"Fn::Sub": "${DomainHomePage}"
				},
				"CorsConfiguration": {
					"CorsRules": [
						{
							"AllowedHeaders": [
								"Authorization"
							],
							"AllowedMethods": [
								"GET"
							],
							"AllowedOrigins": [
								"*"
							],
							"MaxAge": 3000
						}
					]
				},
				"WebsiteConfiguration": {
					"ErrorDocument": "error",
					"IndexDocument": "home"
				}
			}
		},
		"S3WebpageHomePolicy": {
			"Type": "AWS::S3::BucketPolicy",
			"Properties": {
				"Bucket": {
					"Ref": "S3WebpageHome"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Sid": "PublicReadGetObject",
							"Effect": "Allow",
							"Principal": "*",
							"Action": "s3:GetObject",
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${S3WebpageHome}/*"
							}
						}
					]
				}
			}
		},
		"CodeBuildWebpageHome": {
			"Type": "AWS::CodeBuild::Project",
			"Properties": {
				"Name": "sabina_gatti_pl_front_end",
				"ServiceRole": {
					"Fn::GetAtt": [
						"CodeBuildWebpageHomeRole",
						"Arn"
					]
				},
				"TimeoutInMinutes": 60,
				"Source": {
					"Type": "CODEPIPELINE",
					"BuildSpec": "buildspec.yml"
				},
				"Artifacts": {
					"Type": "CODEPIPELINE"
				},
				"Environment": {
					"Type": "LINUX_CONTAINER",
					"ComputeType": "BUILD_GENERAL1_SMALL",
					"Image": "aws/codebuild/nodejs:8.11.0",
					"EnvironmentVariables": [
						{
							"Name": "S3_BUCKET",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "S3WebpageHome"
							}
						},
						{
							"Name": "AWS_REGION",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "AWS::Region"
							}
						}
					]
				}
			}
		},
		"CodeBuildWebpageHomeRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "sabina_gatti_pl_front_end_codebuild_webpage",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "codebuild.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				}
			}
		},
		"CodeBuildWebpageHomePolicyCloudFrontCreateInvalidation": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeBuildWebpageHomeRole"
					}
				],
				"PolicyName": "cloud_front_invalidate",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"cloudfront:CreateInvalidation"
							],
							"Resource": "*"
						}
					]
				}
			}
		},
		"CodeBuildWebpageHomePolicyCloudFrontList": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeBuildWebpageHomeRole"
					}
				],
				"PolicyName": "cloudfront_list",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"cloudfront:ListDistributions"
							],
							"Resource": "*"
						}
					]
				}
			}
		},
		"CodeBuildWebpageHomePolicyCWL": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeBuildWebpageHomeRole"
					}
				],
				"PolicyName": "cloud_watch_log_access",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"logs:CreateLogGroup",
								"logs:CreateLogStream",
								"logs:PutLogEvents"
							],
							"Resource": [
								{
									"Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sabina_gatti_pl_front_end"
								},
								{
									"Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sabina_gatti_pl_front_end:*"
								}
							]
						}
					]
				}
			}
		},
		"CodeBuildWebpageHomePolicyS3": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeBuildWebpageHomeRole"
					}
				],
				"PolicyName": "s3_artifact_access",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": "s3:*",
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${CodePipelineArtifacts}/*"
							}
						}
					]
				}
			}
		},
		"CodeBuildWebpageHomePolicyS3Hosting": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeBuildWebpageHomeRole"
					}
				],
				"PolicyName": "s3_hosting",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": "s3:PutObject",
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${S3WebpageHome}/*"
							}
						}
					]
				}
			}
		},
		"PipelineWebpageHome": {
			"Type": "AWS::CodePipeline::Pipeline",
			"Properties": {
				"Name": "sabina_gatti_pl_front_end",
				"ArtifactStore": {
					"Location": {
						"Ref": "CodePipelineArtifacts"
					},
					"Type": "S3"
				},
				"RoleArn": {
					"Fn::GetAtt": [
						"PipelineWebpageHomeRole",
						"Arn"
					]
				},
				"Stages": [
					{
						"Name": "Get",
						"Actions": [
							{
								"Name": "Material",
								"RunOrder": 1,
								"ActionTypeId": {
									"Category": "Source",
									"Owner": "ThirdParty",
									"Provider": "GitHub",
									"Version": "1"
								},
								"Configuration": {
									"Owner": "davidgatti",
									"Repo": "sabina.gatti.pl",
									"Branch": {
										"Ref": "Stage"
									},
									"PollForSourceChanges": true,
									"OAuthToken": {
										"Ref": "GitHubToken"
									}
								},
								"OutputArtifacts": [
									{
										"Name": "material"
									}
								]
							}
						]
					},
					{
						"Name": "Cast",
						"Actions": [
							{
								"Name": "Mold",
								"RunOrder": 1,
								"InputArtifacts": [
									{
										"Name": "material"
									}
								],
								"Configuration": {
									"ProjectName": {
										"Ref": "CodeBuildWebpageHome"
									}
								},
								"ActionTypeId": {
									"Category": "Build",
									"Owner": "AWS",
									"Provider": "CodeBuild",
									"Version": "1"
								}
							}
						]
					}
				]
			}
		},
		"PipelineWebpageHomeRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "sabina_gatti_pl_front_end_codepipeline_webpage",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "codepipeline.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				}
			}
		},
		"PipelineWebpageHomePolicyCB": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "codebuild",
				"Roles": [
					{
						"Ref": "PipelineWebpageHomeRole"
					}
				],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"codebuild:BatchGetBuilds",
								"codebuild:StartBuild"
							],
							"Resource": {
								"Fn::Sub": "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuildWebpageHome}"
							}
						}
					]
				}
			}
		},
		"PipelineWebpageHomePolicyS3": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "s3",
				"Roles": [
					{
						"Ref": "PipelineWebpageHomeRole"
					}
				],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": "s3:*",
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${CodePipelineArtifacts}/*"
							}
						}
					]
				}
			}
		},
		"LambdaNewsletterSubscription": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"FunctionName": "sabina_gatti_pl_newsletter_subscribe",
				"Code": {
					"ZipFile": "exports.handler = async (event) => {return true;};"
				},
				"Handler": "index.handler",
				"MemorySize": 128,
				"Role": {
					"Fn::GetAtt": [
						"LambdaNewsletterSubscriptionRole",
						"Arn"
					]
				},
				"Runtime": "nodejs8.10",
				"Timeout": 60,
				"Environment": {
					"Variables": {
						"MAILCHIMP_API_KEY": {
							"Ref": "MailchimpAPIKey"
						},
						"MAILCHIMP_LIST_ID": {
							"Ref": "MailchimpListID"
						}
					}
				}
			}
		},
		"LambdaNewsletterSubscriptionRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "Lambda-Financial-Calculation",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "lambda.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				},
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
				]
			}
		},
		"CodePipelineNewsletterSubscription": {
			"Type": "AWS::CodePipeline::Pipeline",
			"Properties": {
				"Name": "sabina_gatti_pl_newsletter_subscription",
				"ArtifactStore": {
					"Location": {
						"Ref": "CodePipelineArtifacts"
					},
					"Type": "S3"
				},
				"RoleArn": {
					"Fn::GetAtt": [
						"CodePipelineNewsletterSubscriptionRole",
						"Arn"
					]
				},
				"Stages": [
					{
						"Name": "Get",
						"Actions": [
							{
								"Name": "Material",
								"RunOrder": 1,
								"ActionTypeId": {
									"Category": "Source",
									"Owner": "ThirdParty",
									"Provider": "GitHub",
									"Version": "1"
								},
								"Configuration": {
									"Owner": "davidgatti",
									"Repo": "sabina.gatti.pl-lambda-newsletter-subscribe",
									"Branch": {
										"Ref": "Stage"
									},
									"PollForSourceChanges": true,
									"OAuthToken": {
										"Ref": "GitHubToken"
									}
								},
								"OutputArtifacts": [
									{
										"Name": "source_code"
									}
								]
							}
						]
					},
					{
						"Name": "Cast",
						"Actions": [
							{
								"Name": "Mold",
								"RunOrder": 1,
								"InputArtifacts": [
									{
										"Name": "source_code"
									}
								],
								"Configuration": {
									"ProjectName": {
										"Ref": "CodeBuildNewsletterSubscription"
									}
								},
								"ActionTypeId": {
									"Category": "Build",
									"Owner": "AWS",
									"Provider": "CodeBuild",
									"Version": "1"
								}
							}
						]
					}
				]
			}
		},
		"CodePipelineNewsletterSubscriptionRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "sabina_gatti_pl_newsletter_subscription_code_pipeline",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "codepipeline.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				}
			}
		},
		"PipelinePlanNewsletterSubscriptionPolicyCB": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "code_build",
				"Roles": [
					{
						"Ref": "CodePipelineNewsletterSubscriptionRole"
					}
				],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"codebuild:BatchGetBuilds",
								"codebuild:StartBuild"
							],
							"Resource": {
								"Fn::Sub": "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuildNewsletterSubscription}"
							}
						}
					]
				}
			}
		},
		"PipelinePlanNewsletterSubscriptionPolicyS3": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "s3",
				"Roles": [
					{
						"Ref": "CodePipelineNewsletterSubscriptionRole"
					}
				],
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": "s3:*",
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${CodePipelineArtifacts}/*"
							}
						}
					]
				}
			}
		},
		"CodeBuildNewsletterSubscription": {
			"Type": "AWS::CodeBuild::Project",
			"Properties": {
				"Name": "sabina_gatti_pl_newsletter_subscription",
				"ServiceRole": {
					"Fn::GetAtt": [
						"CodeBuildNewsletterSubscriptionRole",
						"Arn"
					]
				},
				"TimeoutInMinutes": 60,
				"Source": {
					"Type": "CODEPIPELINE",
					"BuildSpec": "buildspec.yml"
				},
				"Artifacts": {
					"Type": "CODEPIPELINE"
				},
				"Environment": {
					"Type": "LINUX_CONTAINER",
					"ComputeType": "BUILD_GENERAL1_SMALL",
					"Image": "aws/codebuild/nodejs:8.11.0",
					"EnvironmentVariables": [
						{
							"Name": "FUNCTION_NAME",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "LambdaNewsletterSubscription"
							}
						},
						{
							"Name": "NEWSLETTER_ENDPOINT",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "APIWebhookNewsletterSubscriptionAccount"
							}
						}
					]
				}
			}
		},
		"CodeBuildNewsletterSubscriptionRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": "sabina_gatti_pl_newsletter_subscription_code_build",
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "codebuild.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				}
			}
		},
		"CodeBuildNewsletterSubscriptionPolicyCWL": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeBuildNewsletterSubscriptionRole"
					}
				],
				"PolicyName": "cloud_watch_log_access",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"logs:CreateLogGroup",
								"logs:CreateLogStream",
								"logs:PutLogEvents"
							],
							"Resource": [
								{
									"Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sabina_gatti_pl_newsletter_subscription"
								},
								{
									"Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sabina_gatti_pl_newsletter_subscription:*"
								}
							]
						}
					]
				}
			}
		},
		"CodeBuildNewsletterSubscriptionPolicyLambdaUpdate": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeBuildNewsletterSubscriptionRole"
					}
				],
				"PolicyName": "lambda_update_function_code",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": "lambda:UpdateFunctionCode",
							"Resource": {
								"Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaNewsletterSubscription}"
							}
						}
					]
				}
			}
		},
		"CodeBuildNewsletterSubscriptionPolicyS3": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [
					{
						"Ref": "CodeBuildNewsletterSubscriptionRole"
					}
				],
				"PolicyName": "s3_artifact_access",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": "s3:GetObject",
							"Resource": {
								"Fn::Sub": "arn:aws:s3:::${CodePipelineArtifacts}/*"
							}
						}
					]
				}
			}
		}
	}
}